{
	"info": {
		"_postman_id": "ae5df8fe-f6a8-46ec-ae0e-0ad4954603b9",
		"name": "Reto Tecnico",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31370436"
	},
	"item": [
		{
			"name": "Tipo Cambio",
			"item": [
				{
					"name": "All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Estado: 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"La respuesta contiene los campos esperados\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"ok\", true);",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
									"    pm.expect(jsonData).to.have.property(\"timestamp\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"details\");",
									"});",
									"",
									"pm.test(\"El campo 'data' tiene el formato correcto\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.data.forEach(item => {",
									"        pm.expect(item).to.have.property(\"monedaOrigen\").that.is.a(\"string\");",
									"        pm.expect(item).to.have.property(\"monedaDestino\").that.is.a(\"string\");",
									"        pm.expect(item).to.have.property(\"compra\").that.is.a(\"number\");",
									"        pm.expect(item).to.have.property(\"venta\").that.is.a(\"number\");",
									"        pm.expect(item).to.have.property(\"actualizacion\").that.is.a(\"string\");",
									"    });",
									"});",
									"",
									"pm.test(\"El campo 'ok' es verdadero\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.ok).to.be.true;",
									"});",
									"",
									"pm.test(\"El campo 'data' contiene al menos un elemento\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Las fechas en 'actualizacion' est치n en formato ISO\", function () {",
									"    const jsonData = pm.response.json();",
									"    const isoFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;",
									"    jsonData.data.forEach(item => {",
									"        pm.expect(item.actualizacion).to.match(isoFormat);",
									"    });",
									"});",
									"",
									"pm.test(\"Los valores de 'compra' y 'venta' son positivos\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.data.forEach(item => {",
									"        pm.expect(item.compra).to.be.above(0);",
									"        pm.expect(item.venta).to.be.above(0);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/tipo-cambio",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"tipo-cambio"
							]
						}
					},
					"response": [
						{
							"name": "Ok",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/v1/tipo-cambio",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"tipo-cambio"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "345"
								}
							],
							"cookie": [],
							"body": "{\n    \"ok\": true,\n    \"message\": \"Tipo de cambio encontrado\",\n    \"data\": [\n        {\n            \"monedaOrigen\": \"USD\",\n            \"monedaDestino\": \"PEN\",\n            \"compra\": 3.5,\n            \"venta\": 3.6,\n            \"actualizacion\": \"2025-01-22T16:09:06\"\n        },\n        {\n            \"monedaOrigen\": \"PEN\",\n            \"monedaDestino\": \"USD\",\n            \"compra\": 0.28,\n            \"venta\": 0.29,\n            \"actualizacion\": \"2025-01-22T16:09:06\"\n        }\n    ],\n    \"timestamp\": \"2025-01-22T11:13:37.688538336\",\n    \"details\": null\n}"
						}
					]
				},
				{
					"name": "By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El c칩digo de estado HTTP es 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"ok\").that.is.a(\"boolean\");",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(jsonData).to.have.property(\"timestamp\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"details\").that.is.null;",
									"});",
									"",
									"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"ok\").that.is.a(\"boolean\");",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(jsonData).to.have.property(\"timestamp\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"details\").that.is.null;",
									"});",
									"",
									"pm.test(\"El campo 'data' existe y tiene formato correcto\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an(\"object\");",
									"    pm.expect(jsonData.data).to.have.property(\"monedaOrigen\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"monedaDestino\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"compra\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"venta\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"actualizacion\").that.is.a(\"string\");",
									"});",
									"",
									"pm.test(\"Los valores de 'compra' y 'venta' son positivos\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.compra).to.be.above(0);",
									"    pm.expect(jsonData.data.venta).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Los c칩digos de moneda tienen 3 caracteres\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.monedaOrigen).to.have.lengthOf(3);",
									"    pm.expect(jsonData.data.monedaDestino).to.have.lengthOf(3);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/tipo-cambio/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"tipo-cambio",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/v1/tipo-cambio/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"tipo-cambio",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "229"
								}
							],
							"cookie": [],
							"body": "{\n    \"ok\": true,\n    \"message\": \"Tipo de cambio encontrado\",\n    \"data\": {\n        \"monedaOrigen\": \"USD\",\n        \"monedaDestino\": \"PEN\",\n        \"compra\": 3.5,\n        \"venta\": 3.6,\n        \"actualizacion\": \"2025-01-22T16:09:06\"\n    },\n    \"timestamp\": \"2025-01-22T11:14:07.234146077\",\n    \"details\": null\n}"
						}
					]
				},
				{
					"name": "By ID not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El c칩digo de estado HTTP es 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"ok\").that.is.a(\"boolean\");",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;",
									"    pm.expect(jsonData).to.have.property(\"timestamp\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"details\").that.is.a(\"string\");",
									"});",
									"",
									"pm.test(\"El campo 'ok' es falso\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.ok).to.be.false;",
									"});",
									"",
									"pm.test(\"El mensaje incluye el ID de tipo de cambio no encontrado\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Tipo de cambio no encontrado -> id: 13\");",
									"});",
									"",
									"pm.test(\"El campo 'data' es null\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.null;",
									"});",
									"",
									"pm.test(\"El campo 'timestamp' tiene el formato correcto\", function () {",
									"    const jsonData = pm.response.json();",
									"    const isoFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;",
									"    pm.expect(jsonData.timestamp).to.match(isoFormat);",
									"});",
									"",
									"pm.test(\"El campo 'details' contiene la URL correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.details).to.include(\"http://localhost:8080/api/v1/tipo-cambio/13\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/tipo-cambio/13",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"tipo-cambio",
								"13"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/v1/tipo-cambio/13",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"tipo-cambio",
										"13"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "180"
								}
							],
							"cookie": [],
							"body": "{\n    \"ok\": false,\n    \"message\": \"Tipo de cambio no encontrado -> id: 13\",\n    \"data\": null,\n    \"timestamp\": \"2025-01-22T12:47:25.57948368\",\n    \"details\": \"[GET] http://localhost:8080/api/v1/tipo-cambio/13\"\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Transaccion",
			"item": [
				{
					"name": "All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El c칩digo de estado HTTP es 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"ok\").that.is.a(\"boolean\");",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
									"    pm.expect(jsonData).to.have.property(\"timestamp\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"details\").that.is.null;",
									"});",
									"",
									"pm.test(\"El campo 'ok' es verdadero\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.ok).to.be.true;",
									"});",
									"",
									"pm.test(\"Cada transacci칩n en 'data' tiene las propiedades correctas\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.data.forEach(item => {",
									"        pm.expect(item).to.have.property(\"montoDestino\").that.is.a(\"number\");",
									"        pm.expect(item).to.have.property(\"monedaDestino\").that.is.a(\"string\");",
									"        pm.expect(item).to.have.property(\"tipoTransaccion\").that.is.a(\"string\");",
									"    });",
									"});",
									"",
									"pm.test(\"Los valores de 'montoDestino' son positivos\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.data.forEach(item => {",
									"        pm.expect(item.montoDestino).to.be.above(0);",
									"    });",
									"});",
									"",
									"pm.test(\"Los valores de 'tipoTransaccion' son v치lidos\", function () {",
									"    const jsonData = pm.response.json();",
									"    const validTipos = [\"COMPRA\", \"VENTA\"];",
									"    jsonData.data.forEach(item => {",
									"        pm.expect(validTipos).to.include(item.tipoTransaccion);",
									"    });",
									"});",
									"",
									"pm.test(\"El campo 'timestamp' tiene el formato correcto\", function () {",
									"    const jsonData = pm.response.json();",
									"    const isoFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;",
									"    pm.expect(jsonData.timestamp).to.match(isoFormat);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/transaccion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"transaccion"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/v1/transaccion",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"transaccion"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "326"
								}
							],
							"cookie": [],
							"body": "{\n    \"ok\": true,\n    \"message\": \"Transaccion encontrada\",\n    \"data\": [\n        {\n            \"montoDestino\": 28,\n            \"monedaDestino\": \"USD\",\n            \"tipoTransaccion\": \"VENTA\"\n        },\n        {\n            \"montoDestino\": 0.29,\n            \"monedaDestino\": \"USD\",\n            \"tipoTransaccion\": \"VENTA\"\n        },\n        {\n            \"montoDestino\": 350,\n            \"monedaDestino\": \"PEN\",\n            \"tipoTransaccion\": \"COMPRA\"\n        }\n    ],\n    \"timestamp\": \"2025-01-22T11:15:35.227513712\",\n    \"details\": null\n}"
						}
					]
				},
				{
					"name": "By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El c칩digo de estado HTTP es 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"ok\").that.is.a(\"boolean\");",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(jsonData).to.have.property(\"timestamp\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"details\").that.is.null;",
									"});",
									"",
									"pm.test(\"El campo 'ok' es verdadero\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.ok).to.be.true;",
									"});",
									"",
									"pm.test(\"El campo 'data' tiene las propiedades correctas\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"montoDestino\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"monedaDestino\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"tipoTransaccion\").that.is.a(\"string\");",
									"});",
									"",
									"pm.test(\"El valor de 'montoDestino' es positivo\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.montoDestino).to.be.above(0);",
									"});",
									"",
									"pm.test(\"El valor de 'tipoTransaccion' es v치lido\", function () {",
									"    const jsonData = pm.response.json();",
									"    const validTipos = [\"COMPRA\", \"VENTA\"];",
									"    pm.expect(validTipos).to.include(jsonData.data.tipoTransaccion);",
									"});",
									"",
									"pm.test(\"El campo 'timestamp' tiene el formato correcto\", function () {",
									"    const jsonData = pm.response.json();",
									"    const isoFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;",
									"    pm.expect(jsonData.timestamp).to.match(isoFormat);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/transaccion/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"transaccion",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/v1/transaccion/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"transaccion",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "184"
								}
							],
							"cookie": [],
							"body": "{\n    \"ok\": true,\n    \"message\": \"Transaccion encontrada\",\n    \"data\": {\n        \"montoDestino\": 350,\n        \"monedaDestino\": \"PEN\",\n        \"tipoTransaccion\": \"COMPRA\"\n    },\n    \"timestamp\": \"2025-01-22T11:15:43.779273444\",\n    \"details\": null\n}"
						}
					]
				},
				{
					"name": "By ID Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El c칩digo de estado HTTP es 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"ok\").that.is.a(\"boolean\");",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;",
									"    pm.expect(jsonData).to.have.property(\"timestamp\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"details\").that.is.a(\"string\");",
									"});",
									"",
									"pm.test(\"El campo 'ok' es falso\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.ok).to.be.false;",
									"});",
									"",
									"pm.test(\"El mensaje incluye el ID de la transacci칩n no encontrada\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Transaccion no encontrada -> id: 999999\");",
									"});",
									"",
									"pm.test(\"El campo 'data' es null\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.null;",
									"});",
									"",
									"pm.test(\"El campo 'timestamp' tiene el formato correcto\", function () {",
									"    const jsonData = pm.response.json();",
									"    const isoFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;",
									"    pm.expect(jsonData.timestamp).to.match(isoFormat);",
									"});",
									"",
									"pm.test(\"El campo 'details' contiene la URL correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.details).to.include(\"http://localhost:8080/api/v1/transaccion/999999\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/transaccion/999999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"transaccion",
								"999999"
							]
						}
					},
					"response": [
						{
							"name": "By ID Not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/v1/transaccion/999999",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"transaccion",
										"999999"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "186"
								}
							],
							"cookie": [],
							"body": "{\n    \"ok\": false,\n    \"message\": \"Transaccion no encontrada -> id: 999999\",\n    \"data\": null,\n    \"timestamp\": \"2025-01-22T12:48:29.687113972\",\n    \"details\": \"[GET] http://localhost:8080/api/v1/transaccion/999999\"\n}"
						}
					]
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El c칩digo de estado HTTP es 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"ok\").that.is.a(\"boolean\");",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(jsonData).to.have.property(\"timestamp\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"details\").that.is.null;",
									"});",
									"",
									"pm.test(\"El campo 'ok' es verdadero\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.ok).to.be.true;",
									"});",
									"",
									"pm.test(\"El campo 'data' tiene las propiedades correctas\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"montoDestino\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"monedaDestino\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"tipoTransaccion\").that.is.a(\"string\");",
									"});",
									"",
									"pm.test(\"El valor de 'montoDestino' es positivo\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.montoDestino).to.be.above(0);",
									"});",
									"",
									"pm.test(\"El valor de 'tipoTransaccion' es v치lido\", function () {",
									"    const jsonData = pm.response.json();",
									"    const validTipos = [\"COMPRA\", \"VENTA\"];",
									"    pm.expect(validTipos).to.include(jsonData.data.tipoTransaccion);",
									"});",
									"",
									"pm.test(\"El campo 'timestamp' tiene el formato correcto\", function () {",
									"    const jsonData = pm.response.json();",
									"    const isoFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;",
									"    pm.expect(jsonData.timestamp).to.match(isoFormat);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tipoTransaccion\" : \"COMPRA\",\n    \"montoOrigen\": 1.2,\n    \"monedaOrigen\": \"USD\",\n    \"monedaDestino\": \"PEN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/transaccion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"transaccion"
							]
						}
					},
					"response": [
						{
							"name": "Ok",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tipoTransaccion\" : \"VENTA\",\n    \"montoOrigen\": 3.6000,\n    \"monedaOrigen\": \"PEN\",\n    \"monedaDestino\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/v1/transaccion",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"transaccion"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "179"
								}
							],
							"cookie": [],
							"body": "{\n    \"ok\": true,\n    \"message\": \"Transaccion creada\",\n    \"data\": {\n        \"montoDestino\": 1.044,\n        \"monedaDestino\": \"USD\",\n        \"tipoTransaccion\": \"VENTA\"\n    },\n    \"timestamp\": \"2025-01-22T11:17:37.821546459\",\n    \"details\": null\n}"
						}
					]
				},
				{
					"name": "Create sin moneda",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El c칩digo de estado HTTP es 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"ok\").that.is.a(\"boolean\");",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;",
									"    pm.expect(jsonData).to.have.property(\"timestamp\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"details\").that.is.a(\"string\");",
									"});",
									"",
									"pm.test(\"El campo 'ok' es falso\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.ok).to.be.false;",
									"});",
									"",
									"pm.test(\"El mensaje incluye el error del campo 'monedaOrigen'\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Campo 'monedaOrigen': La moneda de origen es requerida\");",
									"});",
									"",
									"pm.test(\"El campo 'data' es null\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.null;",
									"});",
									"",
									"pm.test(\"El campo 'timestamp' tiene el formato correcto\", function () {",
									"    const jsonData = pm.response.json();",
									"    const isoFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;",
									"    pm.expect(jsonData.timestamp).to.match(isoFormat);",
									"});",
									"",
									"pm.test(\"El campo 'details' contiene la URL correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.details).to.include(\"http://localhost:8080/api/v1/transaccion\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tipoTransaccion\" : \"COMPRA\",\n    \"montoOrigen\": 1.2,\n    \"monedaDestino\": \"PEN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/transaccion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"transaccion"
							]
						}
					},
					"response": [
						{
							"name": "Campo Required",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"montoOrigen\": 1.2,\n    \"monedaOrigen\": \"USD\",\n    \"monedaDestino\": \"PEN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/v1/transaccion",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"transaccion"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "202"
								}
							],
							"cookie": [],
							"body": "{\n    \"ok\": false,\n    \"message\": \"Campo 'tipoTransaccion': El tipo de transacci칩n es requerido\",\n    \"data\": null,\n    \"timestamp\": \"2025-01-22T11:39:14.527958158\",\n    \"details\": \"[POST] http://localhost:8080/api/v1/transaccion\"\n}"
						}
					]
				},
				{
					"name": "Create moneda invalida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El c칩digo de estado HTTP es 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"ok\").that.is.a(\"boolean\");",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;",
									"    pm.expect(jsonData).to.have.property(\"timestamp\").that.is.a(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"details\").that.is.a(\"string\");",
									"});",
									"",
									"pm.test(\"El campo 'ok' es falso\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.ok).to.be.false;",
									"});",
									"",
									"pm.test(\"El mensaje incluye el error de moneda no encontrada\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Moneda no encontrada -> codigo: USS\");",
									"});",
									"",
									"pm.test(\"El campo 'data' es null\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.null;",
									"});",
									"",
									"pm.test(\"El campo 'timestamp' tiene el formato correcto\", function () {",
									"    const jsonData = pm.response.json();",
									"    const isoFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;",
									"    pm.expect(jsonData.timestamp).to.match(isoFormat);",
									"});",
									"",
									"pm.test(\"El campo 'details' contiene la URL correcta\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.details).to.include(\"http://localhost:8080/api/v1/transaccion\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tipoTransaccion\" : \"COMPRA\",\n    \"montoOrigen\": 1.2,\n    \"monedaOrigen\": \"USS\",\n    \"monedaDestino\": \"PEN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/transaccion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"transaccion"
							]
						}
					},
					"response": [
						{
							"name": "Moneda Not found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tipoTransaccion\" : \"COMPRA\",\n    \"montoOrigen\": 1.2,\n    \"monedaOrigen\": \"USS\",\n    \"monedaDestino\": \"PEN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/v1/transaccion",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"transaccion"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "176"
								}
							],
							"cookie": [],
							"body": "{\n    \"ok\": false,\n    \"message\": \"Moneda no encontrada -> codigo: USS\",\n    \"data\": null,\n    \"timestamp\": \"2025-01-22T11:39:34.166012062\",\n    \"details\": \"[POST] http://localhost:8080/api/v1/transaccion\"\n}"
						}
					]
				}
			]
		}
	]
}